/* * C program to find the square root of a number using binary search */#include <stdio.h> double sqrt_n(int n){    // low corresponds to low of binary search i.e from where we start searching the element     // high corresponds to high of binary search i.e upto where we start searching the element     int low = 0, high = n , mid;     // ans is the variable which will store the sqrt of n.     double ans;     // While loop finds the integral part of the square root    while (low <= high)    {        mid = (low + high) / 2;        if (mid * mid == n)        {            ans = mid;            // This means that ans is a perfect square,so break            break;        }        if (mid * mid < n)        {            // This if block means that sqrt will be in right part            // so updating the ans and start variable            ans=low;            low = mid + 1;        }        else        {            // This else block means that sqrt will be in left part            // so updating the high variable, ans variable will remain same             high = mid - 1;        }    }    // To find precision upto 6 decimal places    float increment_value = 0.1;    for (int i = 0; i < 6; i++)    {        //Incrementing ans until its square is less than equal to entered number        while (ans * ans <= n)        {            ans += increment_value;        }        //Decrementing it once because while loop will break when ans is greater than n        ans -= increment_value;        //Dividing increment by 10 for next digit of the precision        increment_value /= 10;    }    return ans;} int main(){    int n;    printf("Enter number: ");    scanf("%d",&n);    printf("Square root of number %d is: %lf ",n, sqrt_n(n));    return 0;}