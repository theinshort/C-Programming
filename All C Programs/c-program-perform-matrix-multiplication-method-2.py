/* * C program to perform matrix multiplication using recursive */#include<stdio.h>#define m 100void multiply (int r1, int c1, int m1[m][m], int r2, int c2, int m2[m][m], int mul[m][m]){    //Declaring Static because we want them to same in all function calls    static int i = 0, j = 0, k = 0;     if (i >= r1)    {        return;    }    else if (i < r1)    {        if (j < c2)        {            if (k < c1)            {                mul[i][j] += m1[i][k] * m2[k][j];                k++;                //Function call for multiplying all row element with column element                multiply(r1, c1, m1, r2, c2, m2, mul);            }            k = 0;            j++;            //Function call for all elements of row of multiplied matrix            multiply(r1, c1, m1, r2, c2, m2, mul);        }        j = 0;        i++;        //Function call for all rows        multiply(r1, c1, m1, r2, c2, m2, mul);    }} int main(){    int r1,r2,c1,c2;    printf("Enter number of rows for First Matrix:\n");        scanf("%d",&r1);        printf("Enter number of columns for First Matrix:\n");         scanf("%d",&c1);     printf("Enter number of rows for Second Matrix:\n");        scanf("%d",&r2);        printf("Enter number of columns for Second Matrix:\n");         scanf("%d",&c2);    if(c1!=r2)    printf("Multiplication Not Possible");    else    {        int m1[m][m], m2[m][m], mul[m][m] = {0};        printf("Enter first matrix elements \n");        for(int i=0;i<r1;i++)            {                for(int j=0;j<c1;j++)                {                     scanf("%d",&m1[i][j]);                 }            }            printf("Enter Second matrix elements\n");            for(int i=0;i<r2;i++)            {                for(int j=0;j<c2;j++)                {                    scanf("%d",&m2[i][j]);                }            }            multiply(r1,c1,m1,r2,c2,m2,mul);        printf("Multiplied Matrix:\n");        for(int i=0;i<r1;i++)            {                for(int j=0;j<c2;j++)                {                    printf("%d ",mul[i][j]);               }                printf("\n");        }     }    return 0;  }