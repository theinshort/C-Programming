 /* * C Program to Check whether two Strings are Anagrams using ASCII Value */ #include<stdio.h>#include<stdlib.h>#include<malloc.h>#define M 1000 // Maximum string length to be inputted.// 256 is the set of possible characters in our string from ASCII value 0 to ASCII value 255#define CHARSET 256 int checkanagram(char *array1,int alen,char *array2,int blen){    //case 1 verfication    if(alen != blen)    {        return 0;    }     // Initialize the hash array.    int HashArray[CHARSET]={0};    int ascii; //temporary variable to store the ASCII value of the character.     // Fill the array with frequencies of character in the string.    for(int i = 0 ; i < alen; i++)    {        //ASCII value is the represented as index in the array.        ascii=array1[i];        // value represent the frequency of the character.        HashArray[ascii]=HashArray[ascii]+1;    }     // Decrease the frequencies once the character is found in the second string.    for(int i =0; i < blen; i++)    {        ascii=array2[i];        HashArray[ascii]=HashArray[ascii]-1;        // If a frequency becomes -1 it means that that character is not in second string.        if(HashArray[ascii] == -1)        {            return 0;        }    }    return 1;}int getsize(char *str){    int i=0;    while(str[i] != 0)    {        i++;    }    return i;}int main(){    char x[M];    char y[M];     printf("Enter the First String:\t");    gets(x);     printf("Enter the Second String:\t");    gets(y);     int l1=getsize(x);    int l2=getsize(y);     if(checkanagram(x ,l1 ,y ,l2)){        printf("%s and %s are anagrams",x,y);    }    else{        printf("%s and %s are not anagrams",x,y);    }    return 0;}